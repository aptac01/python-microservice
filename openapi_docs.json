{
  "openapi": "3.0.0",
  "info": {
    "title": "Example Api",
    "description": "Example python microservice, where I try different stuff I'm interested in<br/>образец русского текста",
    "version": "1.0",
    "contact": {
      "name": "Alex Tamilin",
      "url": "https://t.me/aptac01",
      "email": "popovalex402@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:1234/",
      "description": "instance of the service in docker container"
    }
  ],
  "paths": {
    "/pingpong": {
      "post": {
        "summary": "pingpong method, solely for testing",
        "tags": [
          "main service methods"
        ],
        "description": "if ping:pong - gives pong:ping, marco:polo - polo:marco",
        "requestBody": {
          "description": "requestBody description <br/> Place for your ad",
          "content": {
            "application/json": {
              "schema": {
                "title": "List of parameters to use in request",
                "type": "object",
                "properties": {
                  "jsonrpc": {
                    "type": "string",
                    "description": "must be equal to version used, 2.0 in our case"
                  },
                  "id": {
                    "type": "string",
                    "description": "returns a request id that client used in his request"
                  },
                  "method": {
                    "type": "string",
                    "description": "method name, in this case - pingpong"
                  },
                  "params": {
                    "type": "object",
                    "description": "dictionary with parameters that are passed to method"
                  }
                }
              },
              "examples": {
                "example1": {
                  "summary": "pongping",
                  "description": "these parameters would return pong:ping as a result",
                  "value": "{\"jsonrpc\": \"2.0\",\"id\": \"any id you like\",\"method\": \"pingpong\",\"params\": {\"ping\":\"pong\"}}",
                  "externalValue": "http://тут.может/быть-сцылка-на-файл-с-примером"
                },
                "example2": {
                  "summary": "polomarco",
                  "description": "these parameters would return polo:marco as a result",
                  "value": "{\"jsonrpc\": \"2.0\",\"id\": \"any id you like\",\"method\": \"pingpong\",\"params\": {\"marco\":\"polo\"}}",
                  "externalValue": "http://тут.может/быть-сцылка-на-файл-с-примером"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfull response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "object name",
                  "type": "object",
                  "properties": {
                    "jsonrpc": {
                      "type": "string",
                      "description": "must be equal to version used, 2.0 in our case"
                    },
                    "id": {
                      "type": "string",
                      "description": "returns a request id that client used in his request"
                    },
                    "result": {
                      "type": "object",
                      "description": "resulting dictionary, \"polo\":\"marco\" (if \"marco\":\"polo\" was requested) and \"pong\":\"ping\" (if \"ping\":\"pong\" was requested)",
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "polo": {
                              "type": "string",
                              "description": "has value marco"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "pong": {
                              "type": "string",
                              "description": "has value ping"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "serve metrics for prometheus",
        "tags": [
          "stuff that helps this service to function properly"
        ],
        "description": "Those metrics are exported from prometheus_flask_exporter and modified to satisfy requirements from people sysadmins and project managers",
        "responses": {
          "200": {
            "description": "In case of success returns whole bunch of prometheus specific metrics",
            "content": {
              "text/*; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "internal_prometheus_format"
                },
                "examples": {
                  "example1": {
                    "summary": "metrics after service restart, no usage",
                    "description": "dddd",
                    "value": "# HELP example_python_service_exporter_info Multiprocess metric\n# TYPE example_python_service_exporter_info gauge\nexample_python_service_exporter_info{pid=\"6387\", service=\"example\", subsystem=\"example\", version=\"0.10.0\"} 1.0",
                    "externalValue": "http://тут.может/быть-сцылка-на-файл-с-примером"
                  },
                  "example2": {
                    "summary": "metrics after some usage",
                    "description": "example of metrics after some usage of pingpong method",
                    "value": "# HELP example_python_service_http_request_duration_seconds Multiprocess metric\n# TYPE example_python_service_http_request_duration_seconds histogram\nexample_python_service_http_request_duration_seconds_sum{method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 0.005957968000075198\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.005\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.01\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.025\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.05\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.075\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.1\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.25\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.5\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"0.75\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"1.0\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"2.5\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"5.0\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"7.5\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"10.0\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_bucket{le=\"+Inf\", method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\nexample_python_service_http_request_duration_seconds_count{method=\"pingpong\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\n# HELP example_python_service_exporter_info Multiprocess metric\n# TYPE example_python_service_exporter_info gauge\nexample_python_service_exporter_info{pid=\"6331\", service=\"example\", subsystem=\"example\", version=\"0.10.0\"} 0.0\nexample_python_service_exporter_info{pid=\"6329\", service=\"example\", subsystem=\"example\", version=\"0.10.0\"} 1.0\nexample_python_service_exporter_info{pid=\"6332\", service=\"example\", subsystem=\"example\", version=\"0.10.0\"} 0.0\n# HELP example_python_service_http_request_total Multiprocess metric\n# TYPE example_python_service_http_request_total counter\nexample_python_service_http_request_total{method=\"POST\", service=\"example\", status=\"200\", subsystem=\"example\", error=\"false\"} 2.0\n",
                    "externalValue": "http://тут.может/быть-сцылка-на-файл-с-примером"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "redirects to /ping/ (with slash at the end)",
        "tags": [
          "stuff that helps this service to function properly"
        ],
        "description": "'nuff said in summary",
        "responses": {
          "308": {
            "description": "Redirect message",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "html"
                },
                "examples": {
                  "example1": {
                    "summary": "html content",
                    "description": "short html message regarding redirect",
                    "externalValue": "http://тут.может/быть-сцылка-на-файл-с-примером",
                    "value": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to target URL: <a href=\"http://localhost:1234/ping/\">http://localhost:1234/ping/</a>.  If not click the link."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ping/": {
      "get": {
        "summary": "show consul that we are alive, well and serving clients",
        "tags": [
          "stuff that helps this service to function properly"
        ],
        "description": "Method needed to integrate with consul. The idea is that consul checks on this endpoint every couple of seconds, to verify that service is alive and well. Consul works with that.",
        "responses": {
          "200": {
            "description": "Simple response to set status 200",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "html"
                },
                "examples": {
                  "example1": {
                    "summary": "pong message",
                    "externalValue": "http://тут.может/быть-сцылка-на-файл-с-примером",
                    "value": "pong"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}